wcpm_core.wave1_r, wcpm_core.wave4_r,
wcpm_easycbmcore.wave1_r, wcpm_easycbmcore.wave4_r) %>%
pivot_longer(
cols = starts_with("wcpm"),
names_to = c("measure", "wave"),
names_sep = "\\.",
names_prefix = "wcpm_",
values_to = "wcpm"
) %>%
mutate(grade_core = paste("Grade", grade_core),
wave = recode(wave,
wave1_r = "Distal (fall)",
wave4_r = "Proximal (spring)"),
measure = recode(measure,
core = "CORE",
easycbmcore = "Traditional"),
sbac_prof = fct_relevel(sbac_prof, "Not Met")) %>%
ggplot(aes(wcpm, measure, fill = sbac_prof)) +
geom_density_ridges(alpha = .7)+
facet_grid(wave ~ grade_core) +
scale_fill_colorblind() +
theme(legend.position = "none") +
labs(
x = "WCPM",
y = "SBAC ELA/L Proficiency"
)
fig_sbac_score / fig_sbac_prof
ggsave(here::here("scripts", "figs", "fig-sbac-scatter.png"), height = 6.5, width = 6.5, units = "in")
# Chunk 12: lgms
getparams_fx <- function(x){
param_names <- c("mean_wave.1", "mean_wave.2", "mean_wave.3", "mean_wave.4",
"residual_wave.1", "residual_wave.2", "residual_wave.3", "residual_wave.4",
"variance_intercept", "variance_slope", "covariance_intercept.slope",
"mean_intercept", "mean_slope")
parameterEstimates(x, standardized = TRUE) %>%
as_tibble() %>%
slice(-c(1:4, 16:19)) %>%
mutate(param_names = param_names)
}
fits_fx <- function(x) {
fitMeasures(x, c("chisq", "df", "pvalue", "tli.robust", "cfi.robust", "rmsea.robust", "rmsea.ci.lower.robust", "rmsea.ci.upper.robust", "aic", "bic")) %>%
as_tibble(rownames = "measure") %>%
mutate(value = as.numeric(value))
}
lgms <- data_r %>%
select(id_core, grade_core, wcpm_easycbmcore.wave1_r:wcpm_easycbmcore.wave4_r,
wcpm_core.wave1_r:wcpm_core.wave4_r) %>%
pivot_longer(
cols = -c(id_core, grade_core),
names_to = c("measure", "wave"),
names_sep = "\\.",
names_prefix = "wcpm_",
values_to = "wcpm"
) %>%
pivot_wider(
names_from = wave,
values_from = wcpm
) %>%
unnest() %>%
group_by(grade_core, measure) %>%
nest() %>%
arrange(grade_core) %>%
mutate(
obsvar = map(data, ~summarise(., across(starts_with("wave"), ~var(., na.rm = TRUE))) %>% unlist(., use.names = FALSE))) %>%
left_join(
times %>%
select(grade_core, wave, time) %>%
mutate(time = round(time, 2)) %>%
pivot_wider(
names_from = wave,
values_from = time,
names_prefix = "time_"
)
) %>%
mutate(
growth = glue::glue(
'i =~ 1*wave1_r + 1*wave2_r + 1*wave3_r + 1*wave4_r
s =~ 0*wave1_r + {time_2}*wave2_r + {time_3}*wave3_r + {time_4}*wave4_r'),
fit = map2(growth, data,
~growth(.x,
data = .y,
estimator = "MLR",
missing = "ML")),
params = map(fit, getparams_fx),
gof = map(fit, fits_fx),
reliability = map2(obsvar, params,
~tibble(obs = .x,
est = filter(.y, str_detect(param_names, "residual")) %>% pull(est),
rel = (obs - est)/obs))
)
# Chunk 14
gofs <- lgms %>%
select(grade = grade_core, test = measure, gof) %>%
unnest()
pvalues <- gofs %>%
filter(measure == "pvalue") %>%
mutate(value = ifelse(value < .001, "< .001", paste0("= ", sprintf("%.3f", round(value, 3)))),
value = str_replace_all(value, "0\\.", "."))
# Chunk 15
paramtable_fx <- function(x){
x %>%
mutate(parameter = ifelse(str_detect(param_names, "covariance"), std.all, est)) %>%
slice(match(c("mean_intercept",
"mean_slope",
"variance_intercept",
"variance_slope",
"covariance_intercept.slope",
"residual_wave.1",
"residual_wave.2",
"residual_wave.3",
"residual_wave.4"),
param_names)) %>%
select(param_names, parameter, se, z) %>%
mutate(across(c(parameter:z), ~ifelse(param_names == "covariance_intercept.slope",
sprintf("%.2f", round(., 2)),
sprintf("%.2f", round(., 2)))
),
across(c(se:z), ~ifelse(param_names == "covariance_intercept.slope", "", .)),
param_names = str_to_title(str_replace_all(param_names, "_", " ")),
param_names = recode(param_names,
"Covariance Intercept.slope" = "Correlation Intercept-Slope"),
param_names = str_replace_all(param_names, "Residual", "Residual Variance"),
param_names = str_replace_all(param_names, "Wave.", "Wave "))
}
se_res <- lgms %>%
mutate(paramtable = map(params, paramtable_fx)) %>%
select(Grade = grade_core, measure, paramtable) %>%
arrange(Grade, measure) %>%
unnest() %>%
filter(str_detect(param_names, "Mean Slope"))
# Chunk 16: reliab
rels <- lgms %>%
ungroup() %>%
filter(!(grade_core == 4 & measure == "easycbmcore")) %>%
select(grade_core, measure, reliability) %>%
unnest() %>%
select(grade_core, measure, rel) %>%
mutate(rel = round(rel, 2),
rel = str_replace_all(rel, "0.", "."))
reliab_info <- lgms %>%
select(Grade = grade_core, measure, reliability) %>%
mutate(reliability = map(reliability, ~mutate(., wave = paste(rep("Wave", 4), c(1:4))))) %>%
arrange(Grade, measure) %>%
pivot_wider(
names_from = measure,
values_from = reliability
) %>%
unnest() %>%
mutate(h = 2*asin(sqrt(rel)) - 2*asin(sqrt(rel1))) %>%
select(Grade, Wave = wave, everything(), -wave1) %>%
mutate(across(c(obs1:h), ~ifelse(Grade == 4, NA_real_, .)),
Grade = paste0("Grade ", Grade),
across(c(obs, est, obs1, est1), ~sprintf("%.1f", round(., 1))),
across(c(rel, rel1, h), ~sprintf("%.2f", round(., 2))),
across(c(obs1:h), ~recode(., "NA" = "--")),
across(c(rel, rel1, h), ~str_replace_all(., "0\\.", "\\."))) %>%
rename(Observed = obs, Residual = est, `Reliability` = rel)
h <- reliab_info %>%
unnest() %>%
mutate(h = as.numeric(h)) %>%
pull(h)
# Chunk 17: seb-results
# Function to add factor scores to observed data
factorscores_fx <- function(data, fit){
data %>%
bind_cols(
lavPredict(fit) %>%
as_tibble() %>%
mutate(across(everything(), ~as.numeric(.)))
)
}
# Function to reshape data into a wide format
shape_fx <- function(d){
d %>%
pivot_longer(
cols = -id_core,
names_to = "var",
values_to = "value"
) %>%
mutate(var = str_remove_all(var, "[1-9]_r")) %>%
pivot_wider(
names_from = var,
values_from = value
) %>%
unnest(cols = c(wave, time)) %>%
unnest() %>%
rename(wcpm = wave)
}
# Function to calculate the SE of the slope for each participant
seb_fx <- function(d){
d %>%
mutate(t = i + (time * s),
resid2 = (t - wcpm)^2,
time = ifelse(is.na(wcpm), NA_integer_, time),
sqx = (time - mean(time, na.rm = TRUE))^2) %>%
summarize(df = sum(!is.na(wcpm)) - 2,
df = ifelse(df < 0, NA_integer_, df),
s = sum(resid2, na.rm = TRUE)/df,
ssqy = sqrt(s),
ssqx = sqrt(sum(sqx, na.rm = TRUE)),
seb = ssqy/ssqx) %>%
pull(seb)
}
seb_info <- lgms %>%
select(grade_core, measure, contains("time"), data, fit) %>%
mutate(data = map2(data, fit,
~factorscores_fx(.x, .y))) %>% #combine factor scores (i and s) to observed data
mutate(data = map2(data, time_1, #add time factor loadings to data
~mutate(.x, time1_r = .y)),
data = map2(data, time_2,
~mutate(.x, time2_r = .y)),
data = map2(data, time_3,
~mutate(.x, time3_r = .y)),
data = map2(data, time_4,
~mutate(.x, time4_r = .y))) %>%
mutate(data = map(data, shape_fx)) %>% #reshape data into wide format
select(grade_core, measure, data) %>%
unnest(cols = c(data)) %>%
group_by(id_core, measure, grade_core) %>%
nest() %>%
mutate(seb = map_dbl(data, seb_fx)) %>%  #calculate the SE of the slope for each participant
mutate(seb = ifelse(is.infinite(seb), NA_integer_, seb))
es_d <- seb_info %>%
ungroup() %>%
select(grade_core, measure, seb) %>%
pivot_wider(
names_from = measure,
values_from = seb
) %>%
mutate(d = map2(easycbmcore, core,
~cohens_d(.x, .y, paired = TRUE) %>% as_tibble() %>% select(-CI))) %>%
select(grade_core, d) %>%
unnest() %>%
mutate(across(-c(grade_core), ~sprintf("%.2f", round(., 2))),
CI = paste0("[", CI_low, " - ", CI_high, "]")) %>%
select(grade_core, d = Cohens_d, CI)
seb_tbl <- seb_info %>%
group_by(grade_core, measure) %>%
summarize(mean_seb = round(mean(seb, na.rm = TRUE), 2),
sd_seb = round(sd(seb, na.rm = TRUE), 2)) %>%
pivot_wider(
names_from = measure,
values_from = contains("seb")
) %>%
select(grade_core, mean_seb_core, sd_seb_core, mean_seb_easycbmcore, sd_seb_easycbmcore) %>%
left_join(es_d) %>%
ungroup() %>%
mutate(across(c(sd_seb_core, sd_seb_easycbmcore), ~paste0("(", ., ")")),
across(c(mean_seb_easycbmcore:CI), ~ifelse(grade_core == "4", "--", .)),
grade_core = factor(grade_core)
)
# Chunk 18: tbl-seb-results
seb_tbl <- seb_tbl %>%
as.data.frame(.)
variable_labels(seb_tbl$grade_core) <- "Grade"
variable_labels(seb_tbl$mean_seb_core) <- "Mean \\emph{SEb}"
variable_labels(seb_tbl$sd_seb_core) <- "\\emph{SD}"
variable_labels(seb_tbl$mean_seb_easycbmcore) <- "Mean \\emph{SEb}"
variable_labels(seb_tbl$sd_seb_easycbmcore) <- "\\emph{SD}"
variable_labels(seb_tbl$d) <- "\\emph{d}"
apa_table(
seb_tbl,
col_spanners = list(`CORE` = c(2, 3), `Traditional` = c(4, 5)),
note = "d = Cohen's d (1988). CI = 95% confidence interval.",
caption = "(ref:tbl-seb-results-cap)",
align = c("l", rep("r", 6)),
escape = TRUE
)
# Chunk 19: tbl-lgms-reliab
reliab_info <- reliab_info %>%
as.data.frame(.)
variable_labels(reliab_info$obs1) <- "Observed"
variable_labels(reliab_info$est1) <- "Residual"
variable_labels(reliab_info$rel1) <- "Reliability"
variable_labels(reliab_info$h) <- "\\emph{h}"
reliab_info <- reliab_info %>%
group_by(Grade) %>%
nest()
apa_table(
list(
`Grade 2` = reliab_info$data[[1]],
`Grade 3` = reliab_info$data[[2]],
`Grade 4` = reliab_info$data[[3]]
),
col_spanners = list(`CORE` = c(2, 4), `Traditional` = c(5, 7)),
caption = "(ref:tbl-lgms-reliab-cap)",
align = c("l", rep("r", 6)),
longtable = TRUE,
escape = FALSE
)
# Chunk 20: pred-comp
model_linear <- linear_reg(mode = "regression") %>%
set_engine("lm")
model_logistic <- logistic_reg(mode = "classification") %>%
set_engine("glm")
eq_comp_core_fall <- readingcomp_easycbm.spring ~ wcpm_core.wave1_r
eq_comp_easycbm_fall <- readingcomp_easycbm.spring ~ wcpm_easycbmcore.wave1_r
eq_comp_core_spring <- readingcomp_easycbm.spring ~ wcpm_core.wave4_r
eq_comp_easycbm_spring <- readingcomp_easycbm.spring ~ wcpm_easycbmcore.wave4_r
cl <- parallel::makeCluster(parallel::detectCores())
doParallel::registerDoParallel(cl)
set.seed(2013)
pred_comp <- data_comp %>%
mutate(grade_core = factor(grade_core)) %>%
select(grade_core, readingcomp_easycbm.spring,
wcpm_core.wave1_r, wcpm_core.wave4_r,
wcpm_easycbmcore.wave1_r, wcpm_easycbmcore.wave4_r) %>%
group_by(grade_core) %>%
nest() %>%
arrange(grade_core) %>%
mutate(
split = map(data, initial_split),
train = map(split, training),
test = map(split, testing),
cv = map(train, ~vfold_cv(., repeats = 5)),
fit_core_fall = map(cv,
~fit_resamples(
model_linear,
eq_comp_core_fall,
.x,
control = control_resamples(verbose = TRUE, save_pred = TRUE)
)
),
fit_easycbm_fall = map(cv,
~fit_resamples(
model_linear,
eq_comp_easycbm_fall,
.x,
control = control_resamples(verbose = TRUE, save_pred = TRUE)
)
),
fit_core_spring = map(cv,
~fit_resamples(
model_linear,
eq_comp_core_spring,
.x,
control = control_resamples(verbose = TRUE, save_pred = TRUE)
)
),
fit_easycbm_spring = map(cv,
~fit_resamples(
model_linear,
eq_comp_easycbm_spring,
.x,
control = control_resamples(verbose = TRUE, save_pred = TRUE)
)
),
last_core_fall = map(split,
~last_fit(
model_linear,
eq_comp_core_fall,
.x
)
),
last_easycbm_fall = map(split,
~last_fit(
model_linear,
eq_comp_easycbm_fall,
.x
)
),
last_core_spring = map(split,
~last_fit(
model_linear,
eq_comp_core_spring,
.x
)
),
last_easycbm_spring = map(split,
~last_fit(
model_linear,
eq_comp_easycbm_spring,
.x
)
)
)
parallel::stopCluster(cl)
comp_sds <- data_comp %>%
group_by(grade_core) %>%
summarize(sd = round(sd(readingcomp_easycbm.spring, na.rm = TRUE), 2))
metrics_fx <- function(x){
collect_metrics(x, summarize = FALSE) %>%
group_by(.metric) %>%
summarize(mean = mean(.estimate),
sd = sd(.estimate)) %>%
pivot_wider(
names_from = .metric,
values_from = c(mean, sd)
) %>%
mutate(across(everything(), ~round(., 2)))
}
metrics_fnl_fx <- function(x){
x %>%
select(.metrics) %>%
unnest(cols = .metrics) %>%
select(.metric, .estimate) %>%
pivot_wider(
names_from = .metric,
values_from = .estimate,
names_prefix = "final_"
)
}
pred_cv_res <- pred_comp %>%
arrange(grade_core) %>%
mutate(distal_core = map(fit_core_fall, metrics_fx),
distal_trad = map(fit_easycbm_fall, metrics_fx)) %>%
select(distal_core, distal_trad) %>%
unnest() %>%
mutate(type = "Distal") %>%
select(type, Grade = grade_core, mean_rmse, sd_rmse, mean_rsq, sd_rsq,
mean_rmse1, sd_rmse1, mean_rsq1, sd_rsq1) %>%
bind_rows(
pred_comp %>%
arrange(grade_core) %>%
mutate(prox_core = map(fit_core_spring, metrics_fx),
prox_trad = map(fit_easycbm_spring, metrics_fx)) %>%
select(prox_core, prox_trad) %>%
unnest() %>%
mutate(type = "Proximal") %>%
select(type, Grade = grade_core, mean_rmse, sd_rmse, mean_rsq, sd_rsq,
mean_rmse1, sd_rmse1, mean_rsq1, sd_rsq1)
)
pred_final_res <- pred_comp %>%
arrange(grade_core) %>%
mutate(distal_core = map(last_core_fall, metrics_fnl_fx),
distal_trad = map(last_easycbm_fall, metrics_fnl_fx)) %>%
select(grade_core, distal_core, distal_trad) %>%
unnest() %>%
mutate(type = "Distal") %>%
bind_rows(
pred_comp %>%
arrange(grade_core) %>%
mutate(distal_core = map(last_core_spring, metrics_fnl_fx),
distal_trad = map(last_easycbm_spring, metrics_fnl_fx)) %>%
select(grade_core, distal_core, distal_trad) %>%
unnest() %>%
mutate(type = "Proximal")
) %>%
rename(Grade = grade_core)
pred_cv_stats <- pred_cv_res %>%
group_by(type, Grade) %>%
summarize(raw_rmse_diff = mean_rmse1 - mean_rmse,
raw_rsq_diff = mean_rsq - mean_rsq1,
sd_diff_rmse = round((sd_rmse1 - sd_rmse)/sd_rmse*100),
cohen_d = round((mean_rmse1 - mean_rmse)/sqrt(((49*(sd_rmse^2))+(49*(sd_rmse1^2)))/98), 2),
sd_diff_rsq = round((sd_rsq - sd_rsq1)/sd_rsq*100),
h = round(2*asin(sqrt(mean_rsq)) - 2*asin(sqrt(mean_rsq1)), 2))
pct_diff <- pred_final_res %>%
arrange(Grade) %>%
mutate(sd = case_when(
Grade == "2" ~ comp_sds$sd[[1]],
Grade == "3" ~ comp_sds$sd[[2]],
Grade == "4" ~ comp_sds$sd[[3]]),
pctrmse = round((final_rmse1 - final_rmse)/sd*100),
pctr2 = round((final_rsq - final_rsq1)*100),
h = round(2*asin(sqrt(final_rsq)) - 2*asin(sqrt(final_rsq1)), 2))
pred_cv_res %>%
left_join(pred_final_res) %>%
mutate(across(c(mean_rmse:final_rsq1), ~sprintf("%.2f", round(., 2))),
across(starts_with("std"), ~paste0("(", .x, ")")),
Grade = paste("Grade", Grade)) %>%
select(type, `Season & Grade` = Grade, mean_rmse, sd_rmse, mean_rsq, sd_rsq, final_rmse, final_rsq,
mean_rmse1, sd_rmse1, mean_rsq1, sd_rsq1, final_rmse1, final_rsq1)
pred_cv_res %>%
left_join(pred_final_res) %>%
mutate(across(c(mean_rmse:final_rsq1), ~sprintf("%.2f", round(., 2))),
across(starts_with("std"), ~paste0("(", .x, ")")),
Grade = paste("Grade", Grade)) %>%
select(type, `Season & Grade` = Grade, mean_rmse, sd_rmse, mean_rsq, sd_rsq, final_rmse, final_rsq,
mean_rmse1, sd_rmse1, mean_rsq1, sd_rsq1, final_rmse1, final_rsq1) %>%
pivot_longer(
cols = -c(type, Grade),
names_to = "stat",
values_to = "value"
) %>%
mutate(measure = ifelse(str_detect(stat, "1"), "Traditional", "CORE"),
stat = str_remove_all(stat, "1"),
type = paste0(type, " - ", measure)) %>%
select(-measure) %>%
pivot_wider(
names_from = stat,
values_from = value
)
pred_cv_res %>%
left_join(pred_final_res) %>%
mutate(across(c(mean_rmse:final_rsq1), ~sprintf("%.2f", round(., 2))),
across(starts_with("std"), ~paste0("(", .x, ")")),
Grade = paste("Grade", Grade)) %>%
select(type, `Season & Grade` = Grade, mean_rmse, sd_rmse, mean_rsq, sd_rsq, final_rmse, final_rsq,
mean_rmse1, sd_rmse1, mean_rsq1, sd_rsq1, final_rmse1, final_rsq1) %>%
pivot_longer(
cols = -c(type, `Season & Grade`),
names_to = "stat",
values_to = "value"
) %>%
mutate(measure = ifelse(str_detect(stat, "1"), "Traditional", "CORE"),
stat = str_remove_all(stat, "1"),
type = paste0(type, " - ", measure)) %>%
select(-measure) %>%
pivot_wider(
names_from = stat,
values_from = value
)
tbl_asr_ex <- read_csv(here::here("data", "tbl_asr_ex.csv")) %>%
rowid_to_column("Word")
tbl_asr_ex
tbl_asr_ex %>%
slice(1:25) %>%
bind_cols(
slice(tbl_asr_ex, 26:49) %>%
add_row()
)
