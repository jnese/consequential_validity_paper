sd_diff_rsq = round((sd_rsq - sd_rsq1)/sd_rsq*100),
h = round(2*asin(sqrt(mean_rsq)) - 2*asin(sqrt(mean_rsq1)), 2))
pct_diff <- pred_final_res %>%
arrange(Grade) %>%
mutate(sd = case_when(
Grade == "2" ~ comp_sds$sd[[1]],
Grade == "3" ~ comp_sds$sd[[2]],
Grade == "4" ~ comp_sds$sd[[3]]),
pctrmse = round((final_rmse1 - final_rmse)/sd*100),
pctr2 = round((final_rsq - final_rsq1)*100),
h = round(2*asin(sqrt(final_rsq)) - 2*asin(sqrt(final_rsq1)), 2))
# Chunk 21: tbl-pred-comp
pred_comp_info <- pred_cv_res %>%
left_join(pred_final_res) %>%
mutate(across(c(mean_rmse:final_rsq1), ~sprintf("%.2f", round(., 2))),
across(starts_with("std"), ~paste0("(", .x, ")")),
Grade = paste("Grade", Grade)) %>%
select(type, Grade, mean_rmse, sd_rmse, mean_rsq, sd_rsq, final_rmse, final_rsq,
mean_rmse1, sd_rmse1, mean_rsq1, sd_rsq1, final_rmse1, final_rsq1) %>%
# pivot_longer(
#   cols = -c(type, Grade),
#   names_to = "stat",
#   values_to = "value"
# ) %>%
# mutate(measure = ifelse(str_detect(stat, "1"), "Traditional", "CORE"),
#        stat = str_remove_all(stat, "1"),
#        type = paste0(type, " - ", measure)) %>%
# select(-measure) %>%
# pivot_wider(
#   names_from = stat,
#   values_from = value
# ) %>%
as.data.frame(.)
variable_labels(pred_comp_info$mean_rmse) <- "Mean \\emph{RMSE}"
variable_labels(pred_comp_info$sd_rmse) <- "(\\emph{SD})"
variable_labels(pred_comp_info$mean_rsq) <- "Mean $R^2$"
variable_labels(pred_comp_info$sd_rsq) <- "(\\emph{SD})"
variable_labels(pred_comp_info$final_rmse) <- "Final \\emph{RMSE}"
variable_labels(pred_comp_info$final_rsq) <- "Final $R^2$"
variable_labels(pred_comp_info$mean_rmse1) <- "Mean \\emph{RMSE}"
variable_labels(pred_comp_info$sd_rmse1) <- "(\\emph{SD})"
variable_labels(pred_comp_info$mean_rsq1) <- "Mean $R^2$"
variable_labels(pred_comp_info$sd_rsq1) <- "(\\emph{SD})"
variable_labels(pred_comp_info$final_rmse1) <- "Final \\emph{RMSE}"
variable_labels(pred_comp_info$final_rsq1) <- "Final $R^2$"
pred_comp_info <- pred_comp_info %>%
group_by(type) %>%
nest()
apa_table(
list(
`Distal` = pred_comp_info$data[[1]],
`Proximal` = pred_comp_info$data[[2]]#,
# `Proximal - CORE` = pred_comp_info$data[[3]],
# `Proximal - Traditional` = pred_comp_info$data[[4]]
),
col_spanners = list(`CORE` = c(2, 7), `Traditional` = c(8, 13)),
caption = "(ref:tbl-pred-comp-cap)",
align = c("l", rep("r", 12)),
font_size = "small",
landscape = TRUE,
# longtable = TRUE,
escape = FALSE
)
# Chunk 22: pred-sbac
eq_sbacscore_core_fall <- sbac_score ~ wcpm_core.wave1_r + grade_core + state
eq_sbacscore_easycbm_fall <- sbac_score ~ wcpm_easycbmcore.wave1_r + grade_core + state
eq_sbacscore_core_spring <- sbac_score ~ wcpm_core.wave4_r + grade_core + state
eq_sbacscore_easycbm_spring <- sbac_score ~ wcpm_easycbmcore.wave4_r + grade_core + state
eq_sbacprof_core_fall <- sbac_prof ~ wcpm_core.wave1_r + grade_core + state
eq_sbacprof_easycbm_fall <- sbac_prof ~ wcpm_easycbmcore.wave1_r + grade_core + state
eq_sbacprof_core_spring <- sbac_prof ~ wcpm_core.wave4_r + grade_core + state
eq_sbacprof_easycbm_spring <- sbac_prof ~ wcpm_easycbmcore.wave4_r + grade_core + state
cl <- parallel::makeCluster(parallel::detectCores())
doParallel::registerDoParallel(cl)
set.seed(2013)
pred_sbac <- data_sbac %>%
mutate(grade_core = factor(grade_core)) %>%
select(grade_core, state, sbac_score, sbac_prof,
wcpm_core.wave1_r, wcpm_core.wave4_r,
wcpm_easycbmcore.wave1_r, wcpm_easycbmcore.wave4_r) %>%
nest(data = everything()) %>%
mutate(
split = map(data, initial_split),
train = map(split, training),
test = map(split, testing),
cv = map(train, ~vfold_cv(., repeats = 5)),
fit_score_core_fall = map(cv,
~fit_resamples(
model_linear,
eq_sbacscore_core_fall,
.x,
control = control_resamples(verbose = TRUE, save_pred = TRUE)
)
),
fit_score_easycbm_fall = map(cv,
~fit_resamples(
model_linear,
eq_sbacscore_easycbm_fall,
.x,
control = control_resamples(verbose = TRUE, save_pred = TRUE)
)
),
fit_prof_core_fall = map(cv,
~fit_resamples(
model_logistic,
eq_sbacprof_core_fall,
.x,
metrics = metric_set(sens, yardstick::spec, roc_auc),
control = control_resamples(verbose = TRUE, save_pred = TRUE)
)
),
fit_prof_easycbm_fall = map(cv,
~fit_resamples(
model_logistic,
eq_sbacprof_easycbm_fall,
.x,
metrics = metric_set(sens, yardstick::spec, roc_auc),
control = control_resamples(verbose = TRUE, save_pred = TRUE)
)
),
fit_score_core_spring = map(cv,
~fit_resamples(
model_linear,
eq_sbacscore_core_spring,
.x,
control = control_resamples(verbose = TRUE, save_pred = TRUE)
)
),
fit_score_easycbm_spring = map(cv,
~fit_resamples(
model_linear,
eq_sbacscore_easycbm_spring,
.x,
control = control_resamples(verbose = TRUE, save_pred = TRUE)
)
),
fit_prof_core_spring = map(cv,
~fit_resamples(
model_logistic,
eq_sbacprof_core_spring,
.x,
metrics = metric_set(sens, yardstick::spec, roc_auc),
control = control_resamples(verbose = TRUE, save_pred = TRUE)
)
),
fit_prof_easycbm_spring = map(cv,
~fit_resamples(
model_logistic,
eq_sbacprof_easycbm_spring,
.x,
metrics = metric_set(sens, yardstick::spec, roc_auc),
control = control_resamples(verbose = TRUE, save_pred = TRUE)
)
),
last_score_core_fall = map(split,
~last_fit(
model_linear,
eq_sbacscore_core_fall,
.x
)
),
last_score_easycbm_fall = map(split,
~last_fit(
model_linear,
eq_sbacscore_easycbm_fall,
.x
)
),
last_prof_core_fall = map(split,
~last_fit(
model_logistic,
eq_sbacprof_core_fall,
.x,
metrics = metric_set(sens, yardstick::spec, roc_auc)
)
),
last_prof_easycbm_fall = map(split,
~last_fit(
model_logistic,
eq_sbacprof_easycbm_fall,
.x,
metrics = metric_set(sens, yardstick::spec, roc_auc)
)
),
last_score_core_spring = map(split,
~last_fit(
model_linear,
eq_sbacscore_core_spring,
.x
)
),
last_score_easycbm_spring = map(split,
~last_fit(
model_linear,
eq_sbacscore_easycbm_spring,
.x
)
),
last_prof_core_spring = map(split,
~last_fit(
model_logistic,
eq_sbacprof_core_spring,
.x,
metrics = metric_set(sens, yardstick::spec, roc_auc)
)
),
last_prof_easycbm_spring = map(split,
~last_fit(
model_logistic,
eq_sbacprof_easycbm_spring,
.x,
metrics = metric_set(sens, yardstick::spec, roc_auc)
)
)
)
parallel::stopCluster(cl)
# Chunk 23
sbac_metrics_fx <- function(x){
collect_metrics(x, summarize = FALSE) %>%
group_by(.metric) %>%
summarize(mean = mean(.estimate),
sd = sd(.estimate)) %>%
mutate(across(c(mean, sd), ~round(., 2)))
}
sbac_cv_res <- pred_sbac %>%
select(starts_with("fit")) %>%
pivot_longer(
cols = everything(),
names_to = "model",
names_prefix = "fit_",
values_to = "results"
) %>%
mutate(results = map(results, sbac_metrics_fx)) %>%
unnest(cols = c(results)) %>%
select(model, .metric, mean, sd) %>%
separate(model, c("outcome", "measure", "type"), "_") %>%
mutate(outcome = recode(outcome,
score = "SBAC Score",
prof = "SBAC Proficiency"),
measure = recode(measure,
core = "CORE",
easycbm = "Traditional"),
type = recode(type,
fall = "Distal",
spring = "Proximal")) %>%
pivot_wider(
names_from = measure,
values_from = c(mean, sd)
) %>%
arrange(outcome,
match(.metric, c("sens", "spec", "roc_auc")))
sbac_final_res <- pred_sbac %>%
select(starts_with("last")) %>%
pivot_longer(
cols = everything(),
names_to = "model",
names_prefix = "last_",
values_to = "results"
) %>%
mutate(results = map(results, ~select(.x, .metrics) %>% unnest(cols = c(.metrics)))) %>%
unnest(cols = c(results)) %>%
select(model, .metric, .estimate) %>%
separate(model, c("outcome", "measure", "type"), "_") %>%
mutate(outcome = recode(outcome,
score = "SBAC Score",
prof = "SBAC Proficiency"),
measure = recode(measure,
core = "mean_CORE",
easycbm = "mean_Traditional"),
type = recode(type,
fall = "Distal",
spring = "Proximal"),
.metric = paste0(.metric, "_final")) %>%
pivot_wider(
names_from = measure,
values_from = .estimate
)
sbac_cv_stats <- sbac_cv_res %>%
mutate(sd_diff = round((sd_Traditional - sd_CORE)/sd_CORE*100),
es = ifelse(.metric == "rmse",
round((mean_Traditional - mean_CORE)/sqrt(((49*(sd_CORE^2))+(49*(sd_Traditional^2)))/98), 2),
round(2*asin(sqrt(mean_CORE)) - 2*asin(sqrt(mean_Traditional)), 2)))
pct_diff_sbac <- sbac_final_res %>%
arrange(desc(outcome)) %>%
mutate(pct = ifelse(str_detect(.metric, "rmse"),
round((mean_Traditional - mean_CORE)/79*100),
round((mean_CORE - mean_Traditional)/mean_CORE*100)),
h = round(2*asin(sqrt(mean_CORE)) - 2*asin(sqrt(mean_Traditional)), 2)
)
fig_sbac_score / fig_sbac_prof
data_comp %>%
mutate(grade_core = factor(grade_core)) %>%
select(grade_core, readingcomp_easycbm.spring,
wcpm_core.wave1_r, wcpm_core.wave4_r,
wcpm_easycbmcore.wave1_r, wcpm_easycbmcore.wave4_r) %>%
pivot_longer(
cols = starts_with("wcpm"),
names_to = c("measure", "wave"),
names_sep = "\\.",
names_prefix = "wcpm_",
values_to = "wcpm"
) %>%
mutate(grade_core = paste("Grade", grade_core),
wave = recode(wave,
wave1_r = "Distal (fall)",
wave4_r = "Proximal (spring)"),
measure = recode(measure,
core = "CORE",
easycbmcore = "Traditional")) %>%
ggplot(aes(wcpm, readingcomp_easycbm.spring, color = measure)) +
geom_point(size = 1) +
geom_smooth(method = "lm", se = FALSE, size = 1) +
facet_grid(wave ~ grade_core) +
scale_color_colorblind() +
theme(legend.position = "bottom",
legend.margin = margin(0,0,0,0),
legend.box.margin = margin(-10,-10,-10,-10)) +
labs(
x = "WCPM",
y = "Reading Comprehension",
color = ""
)
here::here()
ggsave(here::here("scripts", "figs", "fig-comp-scatter.png"), width = 6.5, units = "in")
ggsave(here::here("scripts", "figs", "fig-comp-scatter.png"), height = 6.5, width = 6.5, units = "in")
fig_sbac_score / fig_sbac_prof
ggsave(here::here("scripts", "figs", "fig-sbac-scatter.png"), height = 6.5, width = 6.5, units = "in")
# Chunk 1: setup
library("papaja")
library(tidyverse)
library(janitor)
library(ggridges)
library(lavaan)
library(ggthemes)
library(tidymodels)
library(parallel)
library(doParallel)
library(patchwork)
library(effectsize)
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
message = FALSE)
theme_set(theme_apa(box = TRUE))
#RNGkind(sample.kind = "Rounding")
apa_format_fx <- function(x){
x %>%
tab_options(
table.border.top.color = "white",
column_labels.border.top.width = px(2),
column_labels.border.top.color = "black",
column_labels.border.bottom.width = px(2),
column_labels.border.bottom.color = "black",
table_body.border.bottom.color = "black",
table.border.bottom.color = "white",
table.background.color = "white",
table_body.hlines.color = "white"
) %>%
tab_style(
style = list(
cell_borders(
sides = c("top", "bottom"),
color = "black",
weight = px(1)
),
cell_fill(color = "white", alpha = NULL)
),
locations = cells_row_groups(groups = everything())
) %>%
opt_table_font(font = "times") %>%
#smaller spacing
tab_options(
data_row.padding = gt::px(3),
heading.title.font.size = "small",
table.font.size = "12px"
)
}
# Chunk 2
options(tinytex.verbose = TRUE)
# Chunk 3: data
source(here::here("nopublish", "read_data.R"))
school <- read_csv(here::here("data", "school1819.csv"))
data_raw <- read_csv(here::here("data", "data_open.csv"))
# Rules for selecting easycbmcore wcpm:
# (1) Must reads >= 10 words
# (2) Must read >= 30 sec
# Rules for selecting core wcpm:
# (1) Must read >= 30 sec across n passages
# filter(wr_easycbmcore >= 10) %>% #6374
# filter(secs_easycbmcore >= 30) %>% #5417
# remove rows with missing data on all 4 waves of easycbm and CORE
data_start <- data_raw %>%
mutate(n_easycbmcore = 4 - (is.na(wcpm_easycbmcore.wave1) + is.na(wcpm_easycbmcore.wave2) +
is.na(wcpm_easycbmcore.wave3) + is.na(wcpm_easycbmcore.wave4)),
n_core = 4 - (is.na(wcpm_core.wave1) + is.na(wcpm_core.wave2) +
is.na(wcpm_core.wave3) + is.na(wcpm_core.wave4))) %>%
filter(n_easycbmcore > 0 & n_core > 0)
# wr_fx <- function(x, y){
#   ifelse(x >= 10, y, NA_integer_)
# }
#
# secs_fx <- function(x, y){
#   ifelse(x >= 30, y, NA_integer_)
# }
# RQ1
data_start_r <- data_start %>%
mutate(wcpm_easycbmcore.wave1_r = ifelse(wr_easycbmcore.wave1 >= 10, wcpm_easycbmcore.wave1, NA_integer_),
wcpm_easycbmcore.wave2_r = ifelse(wr_easycbmcore.wave2 >= 10, wcpm_easycbmcore.wave2, NA_integer_),
wcpm_easycbmcore.wave3_r = ifelse(wr_easycbmcore.wave3 >= 10, wcpm_easycbmcore.wave3, NA_integer_),
wcpm_easycbmcore.wave4_r = ifelse(wr_easycbmcore.wave4 >= 10, wcpm_easycbmcore.wave4, NA_integer_),
wcpm_easycbmcore.wave1_r = ifelse(secs_easycbmcore.wave1 >= 30, wcpm_easycbmcore.wave1, NA_integer_),
wcpm_easycbmcore.wave2_r = ifelse(secs_easycbmcore.wave2 >= 30, wcpm_easycbmcore.wave2, NA_integer_),
wcpm_easycbmcore.wave3_r = ifelse(secs_easycbmcore.wave3 >= 30, wcpm_easycbmcore.wave3, NA_integer_),
wcpm_easycbmcore.wave4_r = ifelse(secs_easycbmcore.wave4 >= 30, wcpm_easycbmcore.wave4, NA_integer_),
wcpm_core.wave1_r = ifelse(secs_core.wave1 >= 30, wcpm_core.wave1, NA_integer_),
wcpm_core.wave2_r = ifelse(secs_core.wave2 >= 30, wcpm_core.wave2, NA_integer_),
wcpm_core.wave3_r = ifelse(secs_core.wave3 >= 30, wcpm_core.wave3, NA_integer_),
wcpm_core.wave4_r = ifelse(secs_core.wave4 >= 30, wcpm_core.wave4, NA_integer_)
)
data_r <- data_start_r %>%
mutate(n_easycbmcore_r = 4 - (is.na(wcpm_easycbmcore.wave1_r) + is.na(wcpm_easycbmcore.wave2_r) +
is.na(wcpm_easycbmcore.wave3_r) + is.na(wcpm_easycbmcore.wave4_r)),
n_core_r = 4 - (is.na(wcpm_core.wave1_r) + is.na(wcpm_core.wave2_r) +
is.na(wcpm_core.wave3_r) + is.na(wcpm_core.wave4_r))) %>%
filter(n_easycbmcore_r > 0 & n_core_r > 0)
data_preds <- data_r %>%
filter(!is.na(wcpm_easycbmcore.wave1_r),
!is.na(wcpm_core.wave1_r),
!is.na(wcpm_easycbmcore.wave4_r),
!is.na(wcpm_core.wave4_r))
# RQ2
data_comp <- data_preds %>%
filter(!is.na(readingcomp_easycbm.spring))
# RQ3
data_sbac <- data_preds %>%
filter(!is.na(sbac_score),
sbac_score > 0) %>%
mutate(sbac_prof = fct_relevel(sbac_prof, "Not Met", "Met"))
# data_start %>%
#   filter(is.na(npassages_core.wave1) & is.na(npassages_core.wave2) & is.na(npassages_core.wave3) & is.na(npassages_core.wave4))
#   select(contains("npassages_core"))
#
# summary(data_start$wcpm_core.wave3)
#
# data_start %>%
#    select(contains("npassages_core"), contains("wcpm_core")) %>%
#    pivot_longer(
#      cols = everything(),
#      names_to = c("type", "wave"),
#      values_to = "wcpm",
#      names_sep = "_"
#    ) %>%
#    pivot_wider(
#      names_from = type,
#      values_from = wcpm
#    ) %>%
#    unnest() %>%
# #  mutate(wave = parse_number(wave))
#   ggplot(aes(npassages, wcpm)) +
#   geom_point() +
#   facet_wrap(~waveI)
data_r
data_preds
data_raw <- read_csv("C:/Users/jnese/Desktop/BRT/GRANT-CORE/Project/Publications/consequential_validity_study/consequential_validity_study/data/project_product_data/data_final.csv")
data_raw
tbl_asr_ex <- read_csv("C:/Users/jnese/Desktop/BRT/GRANT-CORE/Project/Publications/consequential_validity_study/consequential_validity_study/data/project_product_data/asr_scores_year5.csv") %>%
slice(1:49) %>%
select(ref, start:score)
write_csv(tbl_asr_ex, here::here("data", "tbl_asr_ex.csv"))
tbl_asr_ex <- read_csv(here::here("data", "tbl_asr_ex.csv"))
tbl_asr_ex
read_csv(here::here("data", "tbl_asr_ex.csv")) %>%
rowid_to_column()
?rowid_to_column
read_csv(here::here("data", "tbl_asr_ex.csv")) %>%
rowid_to_column("Word")
tbl_asr_ex %>%
slice(1:25) %>%
bind_cols(
slice(tbl_asr_ex, 26:49)
)
slice(tbl_asr_ex, 26:49)
slice(tbl_asr_ex, 26:49) %>%
add_row()
slice(tbl_asr_ex, 26:49) %>%
add_row() %>% View()
tbl_asr_ex %>%
slice(1:25) %>%
bind_cols(
slice(tbl_asr_ex, 26:49) %>%
add_row()
)
tbl_asr_ex <- tbl_asr_ex %>%
slice(1:25) %>%
bind_cols(
slice(tbl_asr_ex, 26:49) %>%
add_row()
) %>%
as.data.frame(.)
names(tbl_asr_ex)
tbl_asr_ex <- read_csv(here::here("data", "tbl_asr_ex.csv")) %>%
rowid_to_column("Word")
tbl_asr_ex <- tbl_asr_ex %>%
slice(1:25) %>%
bind_cols(
slice(tbl_asr_ex, 26:49) %>%
add_row()
) %>%
as.data.frame(.)
names(tbl_asr_ex)
tbl_asr_ex <- read_csv(here::here("data", "tbl_asr_ex.csv")) %>%
rowid_to_column("Word")
View(tbl_asr_ex)
