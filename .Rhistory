apa_table(
seb_tbl,
col_spanners = list(`CORE` = c(2, 3), `Traditional` = c(4, 5)),
note = "d = Cohen's d (1988). CI = 95% confidence interval.",
caption = "(ref:tbl-seb-results-cap)",
align = c("l", rep("r", 6)),
escape = TRUE
)
# Chunk 19: tbl-lgms-reliab
reliab_info <- reliab_info %>%
as.data.frame(.)
variable_labels(reliab_info$obs1) <- "Observed"
variable_labels(reliab_info$est1) <- "Residual"
variable_labels(reliab_info$rel1) <- "Reliability"
variable_labels(reliab_info$h) <- "\\emph{h}"
reliab_info <- reliab_info %>%
group_by(Grade) %>%
nest()
apa_table(
list(
`Grade 2` = reliab_info$data[[1]],
`Grade 3` = reliab_info$data[[2]],
`Grade 4` = reliab_info$data[[3]]
),
col_spanners = list(`CORE` = c(2, 4), `Traditional` = c(5, 7)),
caption = "(ref:tbl-lgms-reliab-cap)",
align = c("l", rep("r", 6)),
longtable = TRUE,
escape = FALSE
)
# Chunk 20: pred-comp
model_linear <- linear_reg(mode = "regression") %>%
set_engine("lm")
model_logistic <- logistic_reg(mode = "classification") %>%
set_engine("glm")
eq_comp_core_fall <- readingcomp_easycbm.spring ~ wcpm_core.wave1_r
eq_comp_easycbm_fall <- readingcomp_easycbm.spring ~ wcpm_easycbmcore.wave1_r
eq_comp_core_spring <- readingcomp_easycbm.spring ~ wcpm_core.wave4_r
eq_comp_easycbm_spring <- readingcomp_easycbm.spring ~ wcpm_easycbmcore.wave4_r
cl <- parallel::makeCluster(parallel::detectCores())
doParallel::registerDoParallel(cl)
set.seed(2013)
pred_comp <- data_comp %>%
mutate(grade_core = factor(grade_core)) %>%
select(grade_core, readingcomp_easycbm.spring,
wcpm_core.wave1_r, wcpm_core.wave4_r,
wcpm_easycbmcore.wave1_r, wcpm_easycbmcore.wave4_r) %>%
group_by(grade_core) %>%
nest() %>%
arrange(grade_core) %>%
mutate(
split = map(data, initial_split),
train = map(split, training),
test = map(split, testing),
cv = map(train, ~vfold_cv(., repeats = 5)),
fit_core_fall = map(cv,
~fit_resamples(
model_linear,
eq_comp_core_fall,
.x,
control = control_resamples(verbose = TRUE, save_pred = TRUE)
)
),
fit_easycbm_fall = map(cv,
~fit_resamples(
model_linear,
eq_comp_easycbm_fall,
.x,
control = control_resamples(verbose = TRUE, save_pred = TRUE)
)
),
fit_core_spring = map(cv,
~fit_resamples(
model_linear,
eq_comp_core_spring,
.x,
control = control_resamples(verbose = TRUE, save_pred = TRUE)
)
),
fit_easycbm_spring = map(cv,
~fit_resamples(
model_linear,
eq_comp_easycbm_spring,
.x,
control = control_resamples(verbose = TRUE, save_pred = TRUE)
)
),
last_core_fall = map(split,
~last_fit(
model_linear,
eq_comp_core_fall,
.x
)
),
last_easycbm_fall = map(split,
~last_fit(
model_linear,
eq_comp_easycbm_fall,
.x
)
),
last_core_spring = map(split,
~last_fit(
model_linear,
eq_comp_core_spring,
.x
)
),
last_easycbm_spring = map(split,
~last_fit(
model_linear,
eq_comp_easycbm_spring,
.x
)
)
)
parallel::stopCluster(cl)
comp_sds <- data_comp %>%
group_by(grade_core) %>%
summarize(sd = round(sd(readingcomp_easycbm.spring, na.rm = TRUE), 2))
metrics_fx <- function(x){
collect_metrics(x, summarize = FALSE) %>%
group_by(.metric) %>%
summarize(mean = mean(.estimate),
sd = sd(.estimate)) %>%
pivot_wider(
names_from = .metric,
values_from = c(mean, sd)
) %>%
mutate(across(everything(), ~round(., 2)))
}
metrics_fnl_fx <- function(x){
x %>%
select(.metrics) %>%
unnest(cols = .metrics) %>%
select(.metric, .estimate) %>%
pivot_wider(
names_from = .metric,
values_from = .estimate,
names_prefix = "final_"
)
}
pred_cv_res <- pred_comp %>%
arrange(grade_core) %>%
mutate(distal_core = map(fit_core_fall, metrics_fx),
distal_trad = map(fit_easycbm_fall, metrics_fx)) %>%
select(distal_core, distal_trad) %>%
unnest() %>%
mutate(type = "Distal") %>%
select(type, Grade = grade_core, mean_rmse, sd_rmse, mean_rsq, sd_rsq,
mean_rmse1, sd_rmse1, mean_rsq1, sd_rsq1) %>%
bind_rows(
pred_comp %>%
arrange(grade_core) %>%
mutate(prox_core = map(fit_core_spring, metrics_fx),
prox_trad = map(fit_easycbm_spring, metrics_fx)) %>%
select(prox_core, prox_trad) %>%
unnest() %>%
mutate(type = "Proximal") %>%
select(type, Grade = grade_core, mean_rmse, sd_rmse, mean_rsq, sd_rsq,
mean_rmse1, sd_rmse1, mean_rsq1, sd_rsq1)
)
pred_final_res <- pred_comp %>%
arrange(grade_core) %>%
mutate(distal_core = map(last_core_fall, metrics_fnl_fx),
distal_trad = map(last_easycbm_fall, metrics_fnl_fx)) %>%
select(grade_core, distal_core, distal_trad) %>%
unnest() %>%
mutate(type = "Distal") %>%
bind_rows(
pred_comp %>%
arrange(grade_core) %>%
mutate(distal_core = map(last_core_spring, metrics_fnl_fx),
distal_trad = map(last_easycbm_spring, metrics_fnl_fx)) %>%
select(grade_core, distal_core, distal_trad) %>%
unnest() %>%
mutate(type = "Proximal")
) %>%
rename(Grade = grade_core)
pred_cv_stats <- pred_cv_res %>%
group_by(type, Grade) %>%
summarize(raw_rmse_diff = mean_rmse1 - mean_rmse,
raw_rsq_diff = mean_rsq - mean_rsq1,
sd_diff_rmse = round((sd_rmse1 - sd_rmse)/sd_rmse*100),
cohen_d = round((mean_rmse1 - mean_rmse)/sqrt(((49*(sd_rmse^2))+(49*(sd_rmse1^2)))/98), 2),
sd_diff_rsq = round((sd_rsq - sd_rsq1)/sd_rsq*100),
h = round(2*asin(sqrt(mean_rsq)) - 2*asin(sqrt(mean_rsq1)), 2))
pct_diff <- pred_final_res %>%
arrange(Grade) %>%
mutate(sd = case_when(
Grade == "2" ~ comp_sds$sd[[1]],
Grade == "3" ~ comp_sds$sd[[2]],
Grade == "4" ~ comp_sds$sd[[3]]),
pctrmse = round((final_rmse1 - final_rmse)/sd*100),
pctr2 = round((final_rsq - final_rsq1)*100),
h = round(2*asin(sqrt(final_rsq)) - 2*asin(sqrt(final_rsq1)), 2))
# Chunk 21: tbl-pred-comp
pred_comp_info <- pred_cv_res %>%
left_join(pred_final_res) %>%
mutate(across(c(mean_rmse:final_rsq1), ~sprintf("%.2f", round(., 2))),
across(starts_with("std"), ~paste0("(", .x, ")")),
Grade = paste("Grade", Grade)) %>%
select(type, Grade, mean_rmse, sd_rmse, mean_rsq, sd_rsq, final_rmse, final_rsq,
mean_rmse1, sd_rmse1, mean_rsq1, sd_rsq1, final_rmse1, final_rsq1) %>%
# pivot_longer(
#   cols = -c(type, Grade),
#   names_to = "stat",
#   values_to = "value"
# ) %>%
# mutate(measure = ifelse(str_detect(stat, "1"), "Traditional", "CORE"),
#        stat = str_remove_all(stat, "1"),
#        type = paste0(type, " - ", measure)) %>%
# select(-measure) %>%
# pivot_wider(
#   names_from = stat,
#   values_from = value
# ) %>%
as.data.frame(.)
variable_labels(pred_comp_info$mean_rmse) <- "Mean \\emph{RMSE}"
variable_labels(pred_comp_info$sd_rmse) <- "(\\emph{SD})"
variable_labels(pred_comp_info$mean_rsq) <- "Mean $R^2$"
variable_labels(pred_comp_info$sd_rsq) <- "(\\emph{SD})"
variable_labels(pred_comp_info$final_rmse) <- "Final \\emph{RMSE}"
variable_labels(pred_comp_info$final_rsq) <- "Final $R^2$"
variable_labels(pred_comp_info$mean_rmse1) <- "Mean \\emph{RMSE}"
variable_labels(pred_comp_info$sd_rmse1) <- "(\\emph{SD})"
variable_labels(pred_comp_info$mean_rsq1) <- "Mean $R^2$"
variable_labels(pred_comp_info$sd_rsq1) <- "(\\emph{SD})"
variable_labels(pred_comp_info$final_rmse1) <- "Final \\emph{RMSE}"
variable_labels(pred_comp_info$final_rsq1) <- "Final $R^2$"
pred_comp_info <- pred_comp_info %>%
group_by(type) %>%
nest()
apa_table(
list(
`Distal` = pred_comp_info$data[[1]],
`Proximal` = pred_comp_info$data[[2]]#,
# `Proximal - CORE` = pred_comp_info$data[[3]],
# `Proximal - Traditional` = pred_comp_info$data[[4]]
),
col_spanners = list(`CORE` = c(2, 7), `Traditional` = c(8, 13)),
caption = "(ref:tbl-pred-comp-cap)",
align = c("l", rep("r", 12)),
font_size = "small",
landscape = TRUE,
# longtable = TRUE,
escape = FALSE
)
# Chunk 22: pred-sbac
eq_sbacscore_core_fall <- sbac_score ~ wcpm_core.wave1_r + grade_core + state
eq_sbacscore_easycbm_fall <- sbac_score ~ wcpm_easycbmcore.wave1_r + grade_core + state
eq_sbacscore_core_spring <- sbac_score ~ wcpm_core.wave4_r + grade_core + state
eq_sbacscore_easycbm_spring <- sbac_score ~ wcpm_easycbmcore.wave4_r + grade_core + state
eq_sbacprof_core_fall <- sbac_prof ~ wcpm_core.wave1_r + grade_core + state
eq_sbacprof_easycbm_fall <- sbac_prof ~ wcpm_easycbmcore.wave1_r + grade_core + state
eq_sbacprof_core_spring <- sbac_prof ~ wcpm_core.wave4_r + grade_core + state
eq_sbacprof_easycbm_spring <- sbac_prof ~ wcpm_easycbmcore.wave4_r + grade_core + state
cl <- parallel::makeCluster(parallel::detectCores())
doParallel::registerDoParallel(cl)
set.seed(2013)
pred_sbac <- data_sbac %>%
mutate(grade_core = factor(grade_core)) %>%
select(grade_core, state, sbac_score, sbac_prof,
wcpm_core.wave1_r, wcpm_core.wave4_r,
wcpm_easycbmcore.wave1_r, wcpm_easycbmcore.wave4_r) %>%
nest(data = everything()) %>%
mutate(
split = map(data, initial_split),
train = map(split, training),
test = map(split, testing),
cv = map(train, ~vfold_cv(., repeats = 5)),
fit_score_core_fall = map(cv,
~fit_resamples(
model_linear,
eq_sbacscore_core_fall,
.x,
control = control_resamples(verbose = TRUE, save_pred = TRUE)
)
),
fit_score_easycbm_fall = map(cv,
~fit_resamples(
model_linear,
eq_sbacscore_easycbm_fall,
.x,
control = control_resamples(verbose = TRUE, save_pred = TRUE)
)
),
fit_prof_core_fall = map(cv,
~fit_resamples(
model_logistic,
eq_sbacprof_core_fall,
.x,
metrics = metric_set(sens, yardstick::spec, roc_auc),
control = control_resamples(verbose = TRUE, save_pred = TRUE)
)
),
fit_prof_easycbm_fall = map(cv,
~fit_resamples(
model_logistic,
eq_sbacprof_easycbm_fall,
.x,
metrics = metric_set(sens, yardstick::spec, roc_auc),
control = control_resamples(verbose = TRUE, save_pred = TRUE)
)
),
fit_score_core_spring = map(cv,
~fit_resamples(
model_linear,
eq_sbacscore_core_spring,
.x,
control = control_resamples(verbose = TRUE, save_pred = TRUE)
)
),
fit_score_easycbm_spring = map(cv,
~fit_resamples(
model_linear,
eq_sbacscore_easycbm_spring,
.x,
control = control_resamples(verbose = TRUE, save_pred = TRUE)
)
),
fit_prof_core_spring = map(cv,
~fit_resamples(
model_logistic,
eq_sbacprof_core_spring,
.x,
metrics = metric_set(sens, yardstick::spec, roc_auc),
control = control_resamples(verbose = TRUE, save_pred = TRUE)
)
),
fit_prof_easycbm_spring = map(cv,
~fit_resamples(
model_logistic,
eq_sbacprof_easycbm_spring,
.x,
metrics = metric_set(sens, yardstick::spec, roc_auc),
control = control_resamples(verbose = TRUE, save_pred = TRUE)
)
),
last_score_core_fall = map(split,
~last_fit(
model_linear,
eq_sbacscore_core_fall,
.x
)
),
last_score_easycbm_fall = map(split,
~last_fit(
model_linear,
eq_sbacscore_easycbm_fall,
.x
)
),
last_prof_core_fall = map(split,
~last_fit(
model_logistic,
eq_sbacprof_core_fall,
.x,
metrics = metric_set(sens, yardstick::spec, roc_auc)
)
),
last_prof_easycbm_fall = map(split,
~last_fit(
model_logistic,
eq_sbacprof_easycbm_fall,
.x,
metrics = metric_set(sens, yardstick::spec, roc_auc)
)
),
last_score_core_spring = map(split,
~last_fit(
model_linear,
eq_sbacscore_core_spring,
.x
)
),
last_score_easycbm_spring = map(split,
~last_fit(
model_linear,
eq_sbacscore_easycbm_spring,
.x
)
),
last_prof_core_spring = map(split,
~last_fit(
model_logistic,
eq_sbacprof_core_spring,
.x,
metrics = metric_set(sens, yardstick::spec, roc_auc)
)
),
last_prof_easycbm_spring = map(split,
~last_fit(
model_logistic,
eq_sbacprof_easycbm_spring,
.x,
metrics = metric_set(sens, yardstick::spec, roc_auc)
)
)
)
parallel::stopCluster(cl)
# Chunk 23
sbac_metrics_fx <- function(x){
collect_metrics(x, summarize = FALSE) %>%
group_by(.metric) %>%
summarize(mean = mean(.estimate),
sd = sd(.estimate)) %>%
mutate(across(c(mean, sd), ~round(., 2)))
}
sbac_cv_res <- pred_sbac %>%
select(starts_with("fit")) %>%
pivot_longer(
cols = everything(),
names_to = "model",
names_prefix = "fit_",
values_to = "results"
) %>%
mutate(results = map(results, sbac_metrics_fx)) %>%
unnest(cols = c(results)) %>%
select(model, .metric, mean, sd) %>%
separate(model, c("outcome", "measure", "type"), "_") %>%
mutate(outcome = recode(outcome,
score = "SBAC Score",
prof = "SBAC Proficiency"),
measure = recode(measure,
core = "CORE",
easycbm = "Traditional"),
type = recode(type,
fall = "Distal",
spring = "Proximal")) %>%
pivot_wider(
names_from = measure,
values_from = c(mean, sd)
) %>%
arrange(outcome,
match(.metric, c("sens", "spec", "roc_auc")))
sbac_final_res <- pred_sbac %>%
select(starts_with("last")) %>%
pivot_longer(
cols = everything(),
names_to = "model",
names_prefix = "last_",
values_to = "results"
) %>%
mutate(results = map(results, ~select(.x, .metrics) %>% unnest(cols = c(.metrics)))) %>%
unnest(cols = c(results)) %>%
select(model, .metric, .estimate) %>%
separate(model, c("outcome", "measure", "type"), "_") %>%
mutate(outcome = recode(outcome,
score = "SBAC Score",
prof = "SBAC Proficiency"),
measure = recode(measure,
core = "mean_CORE",
easycbm = "mean_Traditional"),
type = recode(type,
fall = "Distal",
spring = "Proximal"),
.metric = paste0(.metric, "_final")) %>%
pivot_wider(
names_from = measure,
values_from = .estimate
)
sbac_cv_stats <- sbac_cv_res %>%
mutate(sd_diff = round((sd_Traditional - sd_CORE)/sd_CORE*100),
es = ifelse(.metric == "rmse",
round((mean_Traditional - mean_CORE)/sqrt(((49*(sd_CORE^2))+(49*(sd_Traditional^2)))/98), 2),
round(2*asin(sqrt(mean_CORE)) - 2*asin(sqrt(mean_Traditional)), 2)))
pct_diff_sbac <- sbac_final_res %>%
arrange(desc(outcome)) %>%
mutate(pct = ifelse(str_detect(.metric, "rmse"),
round((mean_Traditional - mean_CORE)/79*100),
round((mean_CORE - mean_Traditional)/mean_CORE*100)),
h = round(2*asin(sqrt(mean_CORE)) - 2*asin(sqrt(mean_Traditional)), 2)
)
fig_sbac_score / fig_sbac_prof
data_comp %>%
mutate(grade_core = factor(grade_core)) %>%
select(grade_core, readingcomp_easycbm.spring,
wcpm_core.wave1_r, wcpm_core.wave4_r,
wcpm_easycbmcore.wave1_r, wcpm_easycbmcore.wave4_r) %>%
pivot_longer(
cols = starts_with("wcpm"),
names_to = c("measure", "wave"),
names_sep = "\\.",
names_prefix = "wcpm_",
values_to = "wcpm"
) %>%
mutate(grade_core = paste("Grade", grade_core),
wave = recode(wave,
wave1_r = "Distal (fall)",
wave4_r = "Proximal (spring)"),
measure = recode(measure,
core = "CORE",
easycbmcore = "Traditional")) %>%
ggplot(aes(wcpm, readingcomp_easycbm.spring, color = measure)) +
geom_point(size = 1) +
geom_smooth(method = "lm", se = FALSE, size = 1) +
facet_grid(wave ~ grade_core) +
scale_color_colorblind() +
theme(legend.position = "bottom",
legend.margin = margin(0,0,0,0),
legend.box.margin = margin(-10,-10,-10,-10)) +
labs(
x = "WCPM",
y = "Reading Comprehension",
color = ""
)
here::here()
ggsave(here::here("scripts", "figs", "fig-comp-scatter.png"), width = 6.5, units = "in")
ggsave(here::here("scripts", "figs", "fig-comp-scatter.png"), height = 6.5, width = 6.5, units = "in")
fig_sbac_score / fig_sbac_prof
ggsave(here::here("scripts", "figs", "fig-sbac-scatter.png"), height = 6.5, width = 6.5, units = "in")
