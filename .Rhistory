train = map(split, training),
test = map(split, testing),
cv = map(train, ~vfold_cv(., repeats = 5)),
fit_core_fall = map(cv,
~fit_resamples(
model_linear,
eq_comp_core_fall,
.x,
control = control_resamples(verbose = TRUE, save_pred = TRUE)
)
),
fit_easycbm_fall = map(cv,
~fit_resamples(
model_linear,
eq_comp_easycbm_fall,
.x,
control = control_resamples(verbose = TRUE, save_pred = TRUE)
)
),
fit_core_spring = map(cv,
~fit_resamples(
model_linear,
eq_comp_core_spring,
.x,
control = control_resamples(verbose = TRUE, save_pred = TRUE)
)
),
fit_easycbm_spring = map(cv,
~fit_resamples(
model_linear,
eq_comp_easycbm_spring,
.x,
control = control_resamples(verbose = TRUE, save_pred = TRUE)
)
),
last_core_fall = map(split,
~last_fit(
model_linear,
eq_comp_core_fall,
.x
)
),
last_easycbm_fall = map(split,
~last_fit(
model_linear,
eq_comp_easycbm_fall,
.x
)
),
last_core_spring = map(split,
~last_fit(
model_linear,
eq_comp_core_spring,
.x
)
),
last_easycbm_spring = map(split,
~last_fit(
model_linear,
eq_comp_easycbm_spring,
.x
)
)
)
parallel::stopCluster(cl)
comp_sds <- data_comp %>%
group_by(grade_core) %>%
summarize(sd = round(sd(readingcomp_easycbm.spring, na.rm = TRUE), 2))
metrics_fx <- function(x){
collect_metrics(x, summarize = FALSE) %>%
group_by(.metric) %>%
summarize(mean = mean(.estimate),
sd = sd(.estimate)) %>%
pivot_wider(
names_from = .metric,
values_from = c(mean, sd)
) %>%
mutate(across(everything(), ~round(., 2)))
}
metrics_fnl_fx <- function(x){
x %>%
select(.metrics) %>%
unnest(cols = .metrics) %>%
select(.metric, .estimate) %>%
pivot_wider(
names_from = .metric,
values_from = .estimate,
names_prefix = "final_"
)
}
pred_cv_res <- pred_comp %>%
arrange(grade_core) %>%
mutate(distal_core = map(fit_core_fall, metrics_fx),
distal_trad = map(fit_easycbm_fall, metrics_fx)) %>%
select(distal_core, distal_trad) %>%
unnest() %>%
mutate(type = "Distal") %>%
select(type, Grade = grade_core, mean_rmse, sd_rmse, mean_rsq, sd_rsq,
mean_rmse1, sd_rmse1, mean_rsq1, sd_rsq1) %>%
bind_rows(
pred_comp %>%
arrange(grade_core) %>%
mutate(prox_core = map(fit_core_spring, metrics_fx),
prox_trad = map(fit_easycbm_spring, metrics_fx)) %>%
select(prox_core, prox_trad) %>%
unnest() %>%
mutate(type = "Proximal") %>%
select(type, Grade = grade_core, mean_rmse, sd_rmse, mean_rsq, sd_rsq,
mean_rmse1, sd_rmse1, mean_rsq1, sd_rsq1)
)
pred_final_res <- pred_comp %>%
arrange(grade_core) %>%
mutate(distal_core = map(last_core_fall, metrics_fnl_fx),
distal_trad = map(last_easycbm_fall, metrics_fnl_fx)) %>%
select(grade_core, distal_core, distal_trad) %>%
unnest() %>%
mutate(type = "Distal") %>%
bind_rows(
pred_comp %>%
arrange(grade_core) %>%
mutate(distal_core = map(last_core_spring, metrics_fnl_fx),
distal_trad = map(last_easycbm_spring, metrics_fnl_fx)) %>%
select(grade_core, distal_core, distal_trad) %>%
unnest() %>%
mutate(type = "Proximal")
) %>%
rename(Grade = grade_core)
pct_diff <- pred_final_res %>%
arrange(Grade) %>%
mutate(sd = case_when(
Grade == "2" ~ comp_sds$sd[[1]],
Grade == "3" ~ comp_sds$sd[[2]],
Grade == "4" ~ comp_sds$sd[[3]]),
pctrmse = round((final_rmse1 - final_rmse)/sd*100),
pctr2 = round((final_rsq - final_rsq1)*100),
h = round(2*asin(sqrt(final_rsq)) - 2*asin(sqrt(final_rsq1)), 2))
pred_cv_stats <- pred_cv_res %>%
group_by(type, Grade) %>%
summarize(raw_rmse_diff = mean_rmse1 - mean_rmse,
raw_rsq_diff = mean_rsq - mean_rsq1,
sd_diff_rmse = round((sd_rmse1 - sd_rmse)/sd_rmse*100),
cohen_d = round((mean_rmse1 - mean_rmse)/sqrt(((49*(sd_rmse^2))+(49*(sd_rmse1^2)))/98), 2),
sd_diff_rsq = round((sd_rsq - sd_rsq1)/sd_rsq*100),
h = round(2*asin(sqrt(mean_rsq)) - 2*asin(sqrt(mean_rsq1)), 2))
pred_final_res
pred_cv_res
pred_cv_stats
sprintf("%.2f", pred_cv_stats$cohen_d[1])
pred_cv_stats$cohen_d[2]
pred_cv_stats$cohen_d[3]
pred_cv_stats$cohen_d[4]
sprintf("%.2f", pred_cv_stats$cohen_d[4])
pred_cv_stats$cohen_d[5]
pred_cv_stats$cohen_d[6]
pred_cv_stats$h[1]
sprintf("%.2f", pred_cv_stats$h[1])
pred_cv_stats$h[2]
pred_cv_stats$h[3]
pred_cv_stats$h[4]
sprintf("%.2f", pred_cv_stats$h[4])
pred_cv_stats$h[5]
pred_cv_stats$h[6]
pred_cv_stats$cohen_d
pred_cv_stats$sd_diff_rmse
sort(pred_cv_stats$sd_diff_rmse)[3]
max(pred_cv_stats$sd_diff_rmse)
pred_cv_stats
sort(pred_cv_stats$sd_diff_rmse)[1]
pred_cv_stats$sd_diff_rmse)[1]
sort(pred_cv_stats$sd_diff_rmse)[2]
pred_cv_stats$sd_diff_rmse[1]
pred_cv_stats$sd_diff_rmse[6]
pred_cv_stats$sd_diff_rsq
sort(pred_cv_stats$sd_diff_rsq)[2]
sort(pred_cv_stats$sd_diff_rsq)[4]
max(pred_cv_stats$sd_diff_rsq)
sort(pred_cv_stats$sd_diff_rsq)[3]
sort(pred_cv_stats$sd_diff_rsq)[1]
pct_diff
pct_diff$pctrmse
sort(pct_diff$pctrmse)[2]
max(pct_diff$pctrmse)
pct_diff
sort(pct_diff$pctrmse)[1]
sort(pct_diff$pctr2)[2]
max(pct_diff$pctr2)
pct_diff$h
pct_diff$h[1]
sprintf("%.2f", pct_diff$h[4])
eq_sbacscore_core_fall <- sbac_score ~ wcpm_core.wave1_r + grade_core + state
eq_sbacscore_easycbm_fall <- sbac_score ~ wcpm_easycbmcore.wave1_r + grade_core + state
eq_sbacscore_core_spring <- sbac_score ~ wcpm_core.wave4_r + grade_core + state
eq_sbacscore_easycbm_spring <- sbac_score ~ wcpm_easycbmcore.wave4_r + grade_core + state
eq_sbacprof_core_fall <- sbac_prof ~ wcpm_core.wave1_r + grade_core + state
eq_sbacprof_easycbm_fall <- sbac_prof ~ wcpm_easycbmcore.wave1_r + grade_core + state
eq_sbacprof_core_spring <- sbac_prof ~ wcpm_core.wave4_r + grade_core + state
eq_sbacprof_easycbm_spring <- sbac_prof ~ wcpm_easycbmcore.wave4_r + grade_core + state
cl <- parallel::makeCluster(parallel::detectCores())
doParallel::registerDoParallel(cl)
set.seed(2013)
pred_sbac <- data_sbac %>%
mutate(grade_core = factor(grade_core)) %>%
select(grade_core, state, sbac_score, sbac_prof,
wcpm_core.wave1_r, wcpm_core.wave4_r,
wcpm_easycbmcore.wave1_r, wcpm_easycbmcore.wave4_r) %>%
nest(data = everything()) %>%
mutate(
split = map(data, initial_split),
train = map(split, training),
test = map(split, testing),
cv = map(train, ~vfold_cv(., repeats = 5)),
fit_score_core_fall = map(cv,
~fit_resamples(
model_linear,
eq_sbacscore_core_fall,
.x,
control = control_resamples(verbose = TRUE, save_pred = TRUE)
)
),
fit_score_easycbm_fall = map(cv,
~fit_resamples(
model_linear,
eq_sbacscore_easycbm_fall,
.x,
control = control_resamples(verbose = TRUE, save_pred = TRUE)
)
),
fit_prof_core_fall = map(cv,
~fit_resamples(
model_logistic,
eq_sbacprof_core_fall,
.x,
metrics = metric_set(sens, yardstick::spec, roc_auc),
control = control_resamples(verbose = TRUE, save_pred = TRUE)
)
),
fit_prof_easycbm_fall = map(cv,
~fit_resamples(
model_logistic,
eq_sbacprof_easycbm_fall,
.x,
metrics = metric_set(sens, yardstick::spec, roc_auc),
control = control_resamples(verbose = TRUE, save_pred = TRUE)
)
),
fit_score_core_spring = map(cv,
~fit_resamples(
model_linear,
eq_sbacscore_core_spring,
.x,
control = control_resamples(verbose = TRUE, save_pred = TRUE)
)
),
fit_score_easycbm_spring = map(cv,
~fit_resamples(
model_linear,
eq_sbacscore_easycbm_spring,
.x,
control = control_resamples(verbose = TRUE, save_pred = TRUE)
)
),
fit_prof_core_spring = map(cv,
~fit_resamples(
model_logistic,
eq_sbacprof_core_spring,
.x,
metrics = metric_set(sens, yardstick::spec, roc_auc),
control = control_resamples(verbose = TRUE, save_pred = TRUE)
)
),
fit_prof_easycbm_spring = map(cv,
~fit_resamples(
model_logistic,
eq_sbacprof_easycbm_spring,
.x,
metrics = metric_set(sens, yardstick::spec, roc_auc),
control = control_resamples(verbose = TRUE, save_pred = TRUE)
)
),
last_score_core_fall = map(split,
~last_fit(
model_linear,
eq_sbacscore_core_fall,
.x
)
),
last_score_easycbm_fall = map(split,
~last_fit(
model_linear,
eq_sbacscore_easycbm_fall,
.x
)
),
last_prof_core_fall = map(split,
~last_fit(
model_logistic,
eq_sbacprof_core_fall,
.x,
metrics = metric_set(sens, yardstick::spec, roc_auc)
)
),
last_prof_easycbm_fall = map(split,
~last_fit(
model_logistic,
eq_sbacprof_easycbm_fall,
.x,
metrics = metric_set(sens, yardstick::spec, roc_auc)
)
),
last_score_core_spring = map(split,
~last_fit(
model_linear,
eq_sbacscore_core_spring,
.x
)
),
last_score_easycbm_spring = map(split,
~last_fit(
model_linear,
eq_sbacscore_easycbm_spring,
.x
)
),
last_prof_core_spring = map(split,
~last_fit(
model_logistic,
eq_sbacprof_core_spring,
.x,
metrics = metric_set(sens, yardstick::spec, roc_auc)
)
),
last_prof_easycbm_spring = map(split,
~last_fit(
model_logistic,
eq_sbacprof_easycbm_spring,
.x,
metrics = metric_set(sens, yardstick::spec, roc_auc)
)
)
)
parallel::stopCluster(cl)
sbac_metrics_fx <- function(x){
collect_metrics(x, summarize = FALSE) %>%
group_by(.metric) %>%
summarize(mean = mean(.estimate),
sd = sd(.estimate)) %>%
mutate(across(c(mean, sd), ~round(., 2)))
}
sbac_cv_res <- pred_sbac %>%
select(starts_with("fit")) %>%
pivot_longer(
cols = everything(),
names_to = "model",
names_prefix = "fit_",
values_to = "results"
) %>%
mutate(results = map(results, sbac_metrics_fx)) %>%
unnest(cols = c(results)) %>%
select(model, .metric, mean, sd) %>%
separate(model, c("outcome", "measure", "type"), "_") %>%
mutate(outcome = recode(outcome,
score = "SBAC Score",
prof = "SBAC Proficiency"),
measure = recode(measure,
core = "CORE",
easycbm = "Traditional"),
type = recode(type,
fall = "Distal",
spring = "Proximal")) %>%
pivot_wider(
names_from = measure,
values_from = c(mean, sd)
) %>%
arrange(outcome,
match(.metric, c("sens", "spec", "roc_auc")))
sbac_final_res <- pred_sbac %>%
select(starts_with("last")) %>%
pivot_longer(
cols = everything(),
names_to = "model",
names_prefix = "last_",
values_to = "results"
) %>%
mutate(results = map(results, ~select(.x, .metrics) %>% unnest(cols = c(.metrics)))) %>%
unnest(cols = c(results)) %>%
select(model, .metric, .estimate) %>%
separate(model, c("outcome", "measure", "type"), "_") %>%
mutate(outcome = recode(outcome,
score = "SBAC Score",
prof = "SBAC Proficiency"),
measure = recode(measure,
core = "mean_CORE",
easycbm = "mean_Traditional"),
type = recode(type,
fall = "Distal",
spring = "Proximal"),
.metric = paste0(.metric, "_final")) %>%
pivot_wider(
names_from = measure,
values_from = .estimate
)
pct_diff_sbac <- sbac_final_res %>%
arrange(desc(outcome)) %>%
mutate(pct = ifelse(str_detect(.metric, "rmse"),
round((mean_Traditional - mean_CORE)/79*100),
round((mean_CORE - mean_Traditional)/mean_CORE*100)),
h = round(2*asin(sqrt(mean_CORE)) - 2*asin(sqrt(mean_Traditional)), 2)
)
sbac_cv_stats <- sbac_cv_res %>%
mutate(sd_diff = round((sd_Traditional - sd_CORE)/sd_CORE*100),
es = ifelse(.metric == "rmse",
round((mean_Traditional - mean_CORE)/sqrt(((49*(sd_CORE^2))+(49*(sd_Traditional^2)))/98), 2),
round(2*asin(sqrt(mean_CORE)) - 2*asin(sqrt(mean_Traditional)), 2)))
sbac_cv_stats
sbac_cv_stats$sd_diff[7]
sbac_cv_stats$sd_diff[9]
sbac_cv_stats
pct_diff_sbac
sbac_cv_stats
pct_diff_sbac$pct[1]
pct_diff_sbac$h[2]
round(filter(sbac_cv_res, str_detect(outcome, "Prof"), type == "Distal", str_detect(.metric, "sens"))$mean_CORE, 2)
sbac_cv_stats$es[5]
sbac_cv_stats$es[4]
sbac_cv_stats$mean_CORE[6]
sort(sbac_cv_stats$sd_diff_rmse)[3]
sort(sbac_cv_stats$sd_diff)[3]
max(pred_cv_stats$sd_diff_rmse)
pct_diff_sbac
pct_diff_sbac$mean_CORE[5]
round(pct_diff_sbac$mean_CORE[5], 2)
round(pct_diff_sbac$mean_pctCORE[6], 2)
round(pct_diff_sbac$pct[6], 2)
round(pct_diff_sbac$mean_CORE[10], 2)
pct_diff_sbac$pct[6]
(4.04-2.36)/2.36
(4.04-2.36)/4.04
2.36*1.7
(4.04-2.36)/2.36
(4.04-2.36)/1
(3.04-2.36)/2.36
(3.38-2.36)/2.36
seb_tbl$d[1]
printnum(seb_tbl$d[1])
?printnum
seb_tbl$d[1]
seb_tbl$d[1][[1]]
seb_tbl$d[1][1]
names(seb_tbl$d[1])
str(seb_tbl$d[1])
unname(seb_tbl$d[1])
class(seb_tbl$d[1])
as.numeric(seb_tbl$d[1])
min(filter(rels, measure == "core") %>% pull(rel))
max(filter(rels, measure == "core") %>% pull(rel))
min(filter(rels, measure == "easycbmcore") %>% pull(rel))
max(filter(rels, measure == "easycbmcore") %>% pull(rel))
sort(rels_diff$diff)[[2]]
rels_diff <- rels %>%
filter(grade_core != 4) %>%
mutate(rel = as.numeric(rel)) %>%
pivot_wider(
names_from = measure,
values_from = rel
) %>%
unnest() %>%
mutate(diff = round(core - easycbmcore, 2),
diff = str_replace_all(diff, "0\\.", "\\."))
sort(rels_diff$diff)[[2]]
max(rels_diff$diff)
rels
reliab_info
unnest(reliab_info)
min(unnest(reliab_info)$h)
min(as.numeric(unnest(reliab_info)$h))
min(as.numeric(unnest(reliab_info)$h), na.rm = TRUE)
sort(unnest(reliab_info)$h)[5]
as.numeric(sort(unnest(reliab_info)$h)[5])
as.character(sort(unnest(reliab_info)$h)[5])
as.character(sort(unnest(reliab_info)$h)[6])
as.character(max(unnest(reliab_info)$h, na.rm = TRUE))
round(cor(data_r$wcpm_easycbmcore.wave1_r, data_r$wcpm_easycbmcore.wave4_r, use = "pairwise.complete.obs"), 2)
round(cor(data_r$wcpm_core.wave1_r, data_r$wcpm_core.wave4_r, use = "pairwise.complete.obs"), 2)
pred_final_res
sprintf("%.2f", round(filter(pred_final_res, Grade == "3" & type == "proximal")$final_rmse1, 2))
sprintf("%.2f", round(filter(pred_final_res, Grade == "3" & type == "Proximal")$final_rmse1, 2))
round(filter(pred_final_res, Grade == "3" & type == "Proximal")$final_rmse, 2)
round(filter(pred_final_res, Grade == "3" & type == "Proximal")$final_rmse1, 2)
sbac_final_res
pred_final_res
pred_cv_stats
pct_diff
pct_diff_sbac
sort(pct_diff$pctrmse)[2]
max(pct_diff$pctrmse)
mean(filter(pct_diff_sbac, str_detect(.metric, "rmse"))$pct)
pct_diff_sbac
round(mean(pct_diff$pctr2))
min(pct_diff$pctr2)
max(pct_diff$pctr2)
mean(filter(pct_diff_sbac, str_detect(.metric, "rsq"))$pct)
round(mean(filter(pct_diff_sbac, str_detect(.metric, "rsq"))$pct))
round(mean(pct_diff$pctr2))
round(mean(pct_diff$pctr2))
pct_diff
min(pct_diff$h)
min(pct_diff$h)
max(pct_diff$h)
round(mean(pct_diff$pctr2))
pct_diff_sbac
` to `r max(pct_diff$h)` (average gain of `r round(mean(pct_diff$pctr2))`%)
pct_diff_sbac$h[2]
